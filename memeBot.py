from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random
import asyncio
import re
import os
from dotenv import load_dotenv
import firebase_admin
from firebase_admin import credentials, db

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Firebase
cred = credentials.Certificate({
    "type": "service_account",
    "project_id": os.getenv("FIREBASE_PROJECT_ID"),
    "private_key_id": os.getenv("FIREBASE_PRIVATE_KEY_ID"),
    "private_key": os.getenv("FIREBASE_PRIVATE_KEY").replace('\\n', '\n'),
    "client_email": os.getenv("FIREBASE_CLIENT_EMAIL"),
    "client_id": os.getenv("FIREBASE_CLIENT_ID"),
    "auth_uri": "https://accounts.google.com/o/oauth2/auth",
    "token_uri": "https://oauth2.googleapis.com/token",
    "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
    "client_x509_cert_url": os.getenv("FIREBASE_CLIENT_X509_CERT_URL") or f"https://www.googleapis.com/robot/v1/metadata/x509/{os.getenv('FIREBASE_CLIENT_EMAIL').replace('@', '%40')}"
})

firebase_admin.initialize_app(cred, {
    'databaseURL': os.getenv("FIREBASE_DATABASE_URL")
})

ref = db.reference('/memes')  # —Å—Å—ã–ª–∫–∞ –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TOKEN = os.getenv("TOKEN")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–Ø Meme Maestro! –ö–∏–¥–∞–π —Ä–∏–ª—Å—ã/—à–æ—Ä—Ç—Å—ã –∏–ª–∏ –≤–∏–¥–µ–æ —Å –ø–æ–¥–ø–∏—Å—å—é 'savememe', —è —Å–æ—Ö—Ä–∞–Ω—é —á–µ—Ä–µ–∑ 5 —Å–µ–∫. –ü–∏—à–∏ '–°–∫—É–∫–∞' –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞!")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    allowed_domains = ["https://www.ddinstagram", "https://www.youtube.com/shorts", "https://youtube.com/shorts"]
    text = update.message.text or update.message.caption or ""  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–æ–¥–ø–∏—Å—å –∫ –≤–∏–¥–µ–æ
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ savememe –∏–ª–∏ –¥–æ–º–µ–Ω—ã
    savememe_found = re.search(r"save", text, re.IGNORECASE) is not None
    domain_found = any(domain in text for domain in allowed_domains)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∏–¥–µ–æ
    has_video = update.message.video is not None
    
    if (domain_found or (savememe_found and has_video)):  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å savememe –∏ –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–º–µ–Ω
        meme_data = {
            "chat_id": update.message.chat_id,
            "message_id": update.message.message_id,
            "author": update.message.from_user.username or update.message.from_user.first_name
        }
        await asyncio.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        try:
            ref.push(meme_data)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firebase
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Firebase: {e}")
    
    # –†–µ–∞–∫—Ü–∏—è –Ω–∞ "–°–∫—É–∫–∞"
    if "—Å–∫—É–∫–∞" in text.lower():
        snapshot = ref.get()
        if snapshot:
            memes = list(snapshot.values())
            meme = random.choice(memes)
            try:
                await context.bot.forward_message(
                    chat_id=update.message.chat_id,
                    from_chat_id=meme["chat_id"],
                    message_id=meme["message_id"]
                )
                await update.message.reply_text(f"–ú–µ–º –æ—Ç @{meme['author']}!")
            except Exception as e:
                await update.message.reply_text(f"–ù–µ —Å–º–æ–≥ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –º–µ–º: {str(e)}")
        else:
            await update.message.reply_text("–ú–µ–º–æ–≤ –Ω–µ—Ç, —É–≤—ã! üò¢")

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT | filters.VIDEO, handle_message))
    app.run_polling()

if __name__ == "__main__":
    main()